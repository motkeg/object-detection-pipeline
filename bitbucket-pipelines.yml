################
# General Info #
################

# This configuration file (must be with this name) defines bitbucket-pipelines tool behavior (CI tool):
#      CI: Continues Integration - run automatic tests on each push or pull request (it is configurable)
# --
# This template configuration runs tests (using pytest) on both python 2.7.15 and 3.6.8 on each pull request creation.
# --
# You should enable Bitbucket Pipeline in your repo by going to Settings/PIPELINES/Settings and click on "Enable"
# --
# Only use spaces to indent your .yml configuration.

################
# Useful links #
################

# Basic concept on how to configure the bitbucket pipelines yaml:
#     https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html
#     * Each "step" load a clean docker
#     * Use "image" to choose python image.
#     * Use "definitions" and anchors to avoid duplication, see setup-test anchor example below.
#     * Use "artifacts" to defines files to be share to later steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment:
#     https://hub.docker.com/_/python
# ------
# Online validator for the config:
#     https://bitbucket-pipelines.prod.public.atl-paas.net/validator
# ------
# Images both public and private:
#     https://confluence.atlassian.com/bitbucket/use-docker-images-as-build-environments-792298897.html
# ------
# Anchors guide:
#     https://confluence.atlassian.com/bitbucket/yaml-anchors-960154027.html
# ------
# Test reporting:
#     https://confluence.atlassian.com/bitbucket/test-reporting-in-pipelines-939708543.html
# ------
# Branching model:
#     https://confluence.atlassian.com/bitbucket/branch-workflows-856697482.html
# ------
# Run only on Pull Requests:
#     https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html#Configurebitbucket-pipelines.yml-ci_pull-requestspull-requests
# ------
# Run in parallel:
#     Be aware that the total number of build minutes is not change if you make the steps parallel, it is just quicker.
#     https://confluence.atlassian.com/bitbucket/parallel-steps-946606807.html
# ------
# Update repository:
#     https://confluence.atlassian.com/bitbucket/push-back-to-your-repository-962352710.html
# ------
# Enable access to submodules and private repositories:
#     https://community.atlassian.com/t5/Bitbucket-questions/Bitbucket-Pipelines-and-git-submodules/qaq-p/130479
# ------

definitions:
    steps:
        - step: &setup-test  # step id
            caches:
                - pip
            script:  # shell commands to run
                - python --version
                - pip install -r bitbucket-pipelines_requirements.txt
                - python -m pytest --junitxml=./test-reports/junit.xml ./tests

                # You can not pip install private repo directly (git+https://... is not working). In order to do so
                # you need to create ssh key for your current repo and add it to the repository you want to install, see:
                #   https://community.atlassian.com/t5/Bitbucket-questions/Bitbucket-Pipelines-and-git-submodules/qaq-p/130479
                # If the repo you want to install is not yours ask for the repository admin to add your key.
                #
                # Than you can clone it and pip install the cloned directory, example using infra:
                # - git clone --single-branch --branch v0.1.2 git@bitbucket.org:razor-tech/infra.git
                # - pip install ./infra

options:
    max-time: 4 # maximum minutes to run the tests

pipelines:
    pull-requests:  # run when pull request is created (or updated)
        "**":  # on all branches
            - parallel: # steps bellow will be run in parallel
                - step:
                    <<: *setup-test  # concatenate the setup-test step from the "definitions" section
                    name: Setup repo environment and Test - Python 3  # name to show on the pipelines web page
                    image: python:3.6.8  # docker to use (from Docker Hub)
                - step:
                    <<: *setup-test
                    name: Setup repo environment and Test - Python 2
                    image: python:2.7.15
